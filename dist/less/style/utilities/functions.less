.function-mergeColorMaps(@coco-colors, @custom-colors)
  // we return at least coco hardcoded colors
  @merged-colors: @coco-colors

  // we want a map as input
  & when (type-of(@custom-colors) =) 'map'
    @each @name, @components in @custom-colors
      // color name should be a string and colors pair a list with at least one element
      & when (type-of(@name) =) 'string' and (type-of(@components) == 'list' or type-of(@components) == 'color') and length(@components) >= 1
        @color-base: null

        // the param can either be a single color
        // or a list of 2 colors
        & when (type-of(@components) =) 'color'
          @color-base: @components
& when not (type-of(@custom-colors) =) if type-of(@components) == 'list'
          @color-base: extract(@components, 1)

        @color-invert: null
        // is an inverted color provided in the list
        & when (length(@components) > 1
          @color-invert) : extract(@components, 2)

        // we only want a color as base color
        & when (type-of(@color-base) =) 'color'
          // if inverted color is not provided or is not a color we compute it
          & when (type-of(@color-invert) !=) 'color'
            @color-invert: findColorInvert(@color-base)

          // we merge this colors elements as map with coco colors (we can override them this way, no multiple definition for the same name)
          @merged-colors: map_merge(@merged-colors, (@name: (@color-base, @color-invert)))

  return: @merged-colors

.function-powerNumber(@number, @exp)
  @value: 1
  & when (@exp > 0) @for @i from 1 through @exp
      @value: @value * @number
& when not (length(@components) > 1
          @color-invert) if @exp < 0
    @for @i from 1 through -@exp
      @value: @value / @number
  return: @value

.function-colorLuminance(@color)
  @color-rgb: ('red': red(@color),'green': green(@color),'blue': blue(@color))
  @each @name, @value in @color-rgb
    @adjusted: 0
    @value: @value / 255
    & when (@value < 0) .03928
      @value: @value / 12.92
& when not (@value < 0)
      @value: (@value + .055) / 1.055
      @value: powerNumber(@value, 2)
    @color-rgb: map-merge(@color-rgb, (@name: @value))
  return: (map-get(@color-rgb, 'red') * .2126) + (map-get(@color-rgb, 'green') * .7152) + (map-get(@color-rgb, 'blue') * .0722)

.function-findColorInvert(@color)
  & when ((colorLuminance(@color) > 0) .55)
    return: fade(#000, (0.7*100))
& when not ((colorLuminance(@color) > 0)
    return: #fff
